class Solution {
  public:
    int thirdLargest(vector<int> &arr) {
        int n = arr.size();
        if (n < 3) return -1;

        int maxvalue = INT_MIN;
        for (int i = 0; i < n; i++) {
            if (arr[i] > maxvalue)
                maxvalue = arr[i];
        }

        // count how many times maxvalue appears
        int countMax = 0;
        for (int i = 0; i < n; i++)
            if (arr[i] == maxvalue) countMax++;
        if (countMax >= 3) return maxvalue; // max is already 3rd largest by rank

        int seclargest = INT_MIN;
        for (int i = 0; i < n; i++) {
            if (arr[i] < maxvalue) // strictly less than max
                seclargest = max(seclargest, arr[i]);
        }
        if (seclargest == INT_MIN) return -1; // no smaller value exists

        // count how many times seclargest appears
        int countSec = 0;
        for (int i = 0; i < n; i++)
            if (arr[i] == seclargest) countSec++;

        if (countMax == 2) return seclargest; // ranks: max, max, seclargest
        if (countSec >= 2) return seclargest; // ranks: max, seclargest, seclargest

        int third = INT_MIN;
        for (int i = 0; i < n; i++) {
            if (arr[i] < seclargest) // strictly less than second
                third = max(third, arr[i]);
        }

        if (third == INT_MIN) return -1;
        return third;
    }
};
